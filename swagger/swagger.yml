swagger: "2.0"
info:
  title: beego Test API
  description: |
    beego has a very cool tools to autogenerate documents for your API
  version: 1.0.0
  termsOfService: http://beego.me/
  contact:
    email: astaxie@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
basePath: /v1
paths:
  /order-items/:
    get:
      tags:
      - order-items
      description: |-
        get Order_items
        <br>
      operationId: Order_itemsController.Get All
      parameters:
      - in: query
        name: query
        description: Filter. e.g. col1:v1,col2:v2 ...
        type: string
      - in: query
        name: fields
        description: Fields returned. e.g. col1,col2 ...
        type: string
      - in: query
        name: sortby
        description: Sorted-by fields. e.g. col1,col2 ...
        type: string
      - in: query
        name: order
        description: Order corresponding to each sortby field, if single value, apply
          to all sortby fields. e.g. desc,asc ...
        type: string
      - in: query
        name: limit
        description: Limit the size of result set. Must be an integer
        type: string
      - in: query
        name: offset
        description: Start position of result set. Must be an integer
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Order_items'
        "403":
          description: ""
    post:
      tags:
      - order-items
      description: |-
        create Order_items
        <br>
      operationId: Order_itemsController.Post
      parameters:
      - in: body
        name: body
        description: body for Order_items content
        required: true
        schema:
          $ref: '#/definitions/models.Order_items'
      responses:
        "201":
          description: '{int} models.Order_items'
        "403":
          description: body is empty
  /order-items/{id}:
    get:
      tags:
      - order-items
      description: |-
        get Order_items by id
        <br>
      operationId: Order_itemsController.Get One
      parameters:
      - in: path
        name: id
        description: The key for staticblock
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Order_items'
        "403":
          description: :id is empty
    put:
      tags:
      - order-items
      description: |-
        update the Order_items
        <br>
      operationId: Order_itemsController.Put
      parameters:
      - in: path
        name: id
        description: The id you want to update
        required: true
        type: string
      - in: body
        name: body
        description: body for Order_items content
        required: true
        schema:
          $ref: '#/definitions/models.Order_items'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/responses.OrderItemsCustom'
        "403":
          description: :id is not int
    delete:
      tags:
      - order-items
      description: |-
        delete the Order_items
        <br>
      operationId: Order_itemsController.Delete
      parameters:
      - in: path
        name: id
        description: The id you want to delete
        required: true
        type: string
      responses:
        "200":
          description: '{string} delete success!'
        "403":
          description: id is empty
  /orders/:
    get:
      tags:
      - orders
      description: |-
        get Orders
        <br>
      operationId: OrdersController.Get All
      parameters:
      - in: query
        name: query
        description: Filter. e.g. col1:v1,col2:v2 ...
        type: string
      - in: query
        name: fields
        description: Fields returned. e.g. col1,col2 ...
        type: string
      - in: query
        name: sortby
        description: Sorted-by fields. e.g. col1,col2 ...
        type: string
      - in: query
        name: order
        description: Order corresponding to each sortby field, if single value, apply
          to all sortby fields. e.g. desc,asc ...
        type: string
      - in: query
        name: limit
        description: Limit the size of result set. Must be an integer
        type: string
      - in: query
        name: offset
        description: Start position of result set. Must be an integer
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Orders'
        "403":
          description: ""
    post:
      tags:
      - orders
      description: |-
        create Orders
        <br>
      operationId: OrdersController.Post
      parameters:
      - in: body
        name: body
        description: body for Orders content
        required: true
        schema:
          $ref: '#/definitions/models.OrdersRequestDTO'
      responses:
        "201":
          description: '{int} models.Orders'
        "403":
          description: body is empty
  /orders/{id}:
    get:
      tags:
      - orders
      description: |-
        get Orders by id
        <br>
      operationId: OrdersController.Get One
      parameters:
      - in: path
        name: id
        description: The key for staticblock
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Orders'
        "403":
          description: :id is empty
    put:
      tags:
      - orders
      description: |-
        update the Orders
        <br>
      operationId: OrdersController.Put
      parameters:
      - in: path
        name: id
        description: The id you want to update
        required: true
        type: string
      - in: body
        name: body
        description: body for Orders content
        required: true
        schema:
          $ref: '#/definitions/models.Orders'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Orders'
        "403":
          description: :id is not int
    delete:
      tags:
      - orders
      description: |-
        delete the Orders
        <br>
      operationId: OrdersController.Delete
      parameters:
      - in: path
        name: id
        description: The id you want to delete
        required: true
        type: string
      responses:
        "200":
          description: '{string} delete success!'
        "403":
          description: id is empty
  /orders/branch/{id}:
    get:
      tags:
      - orders
      description: |-
        get Orders by branch
        <br>
      operationId: OrdersController.Get All Orders by Branch
      parameters:
      - in: query
        name: query
        description: Filter. e.g. col1:v1,col2:v2 ...
        type: string
      - in: query
        name: fields
        description: Fields returned. e.g. col1,col2 ...
        type: string
      - in: query
        name: sortby
        description: Sorted-by fields. e.g. col1,col2 ...
        type: string
      - in: query
        name: order
        description: Order corresponding to each sortby field, if single value, apply
          to all sortby fields. e.g. desc,asc ...
        type: string
      - in: query
        name: limit
        description: Limit the size of result set. Must be an integer
        type: string
      - in: query
        name: offset
        description: Start position of result set. Must be an integer
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Orders'
        "403":
          description: ""
  /orders/confirm-order:
    post:
      tags:
      - orders
      description: |-
        Confirm Orders
        <br>
      operationId: OrdersController.ConfirmOrder
      parameters:
      - in: body
        name: body
        description: body for Orders content
        required: true
        schema:
          $ref: '#/definitions/models.ConfirmOrderDTO'
      responses:
        "201":
          description: '{int} models.Orders'
        "403":
          description: body is empty
  /orders/count/:
    get:
      tags:
      - orders
      description: |-
        get Item_quantity by Item id
        <br>
      operationId: OrdersController.Get Item Quantity
      parameters:
      - in: query
        name: query
        description: Filter. e.g. col1:v1,col2:v2 ...
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/responses.StringResponseDTO'
        "403":
          description: :id is empty
  /orders/get-user-orders:
    post:
      tags:
      - orders
      description: |-
        get user orders
        <br>
      operationId: OrdersController.Get User Orders
      parameters:
      - in: body
        name: body
        description: body for Transactions content
        required: true
        schema:
          $ref: '#/definitions/requests.GetUserOrdersRequest'
      responses:
        "201":
          description: '{int} models.OrdersResponseDTO'
        "403":
          description: body is empty
  /orders/return-order:
    post:
      tags:
      - orders
      description: |-
        Return Order
        <br>
      operationId: OrdersController.ReturnOrder
      parameters:
      - in: body
        name: body
        description: body for Orders content
        required: true
        schema:
          $ref: '#/definitions/requests.ConfirmOrderDTO'
      responses:
        "201":
          description: '{int} models.Orders'
        "403":
          description: body is empty
  /transactions/:
    get:
      tags:
      - transactions
      description: |-
        get Transactions
        <br>
      operationId: TransactionsController.Get All
      parameters:
      - in: query
        name: query
        description: Filter. e.g. col1:v1,col2:v2 ...
        type: string
      - in: query
        name: search
        description: Filter. e.g. camera ...
        type: string
      - in: query
        name: fields
        description: Fields returned. e.g. col1,col2 ...
        type: string
      - in: query
        name: sortby
        description: Sorted-by fields. e.g. col1,col2 ...
        type: string
      - in: query
        name: order
        description: Order corresponding to each sortby field, if single value, apply
          to all sortby fields. e.g. desc,asc ...
        type: string
      - in: query
        name: limit
        description: Limit the size of result set. Must be an integer
        type: string
      - in: query
        name: offset
        description: Start position of result set. Must be an integer
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Transactions'
        "403":
          description: ""
  /transactions/{id}:
    get:
      tags:
      - transactions
      description: |-
        get Transactions by id
        <br>
      operationId: TransactionsController.Get One
      parameters:
      - in: path
        name: id
        description: The key for staticblock
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Transactions'
        "403":
          description: :id is empty
    put:
      tags:
      - transactions
      description: |-
        update the Transactions
        <br>
      operationId: TransactionsController.Put
      parameters:
      - in: path
        name: id
        description: The id you want to update
        required: true
        type: string
      - in: body
        name: body
        description: body for Transactions content
        required: true
        schema:
          $ref: '#/definitions/requests.UpdateTransactionRequestDTO'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Transactions'
        "403":
          description: :id is not int
    delete:
      tags:
      - transactions
      description: |-
        delete the Transactions
        <br>
      operationId: TransactionsController.Delete
      parameters:
      - in: path
        name: id
        description: The id you want to delete
        required: true
        type: string
      responses:
        "200":
          description: '{string} delete success!'
        "403":
          description: id is empty
  /transactions/count/:
    get:
      tags:
      - transactions
      description: |-
        get transaction count
        <br>
      operationId: TransactionsController.Get Transaction Count
      parameters:
      - in: query
        name: query
        description: Filter. e.g. col1:v1,col2:v2 ...
        type: string
      - in: query
        name: search
        description: Filter. e.g. camera ...
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/responses.StringResponseDTO'
        "403":
          description: :id is empty
  /transactions/get-user-transactions:
    post:
      tags:
      - transactions
      description: |-
        create Transactions
        <br>
      operationId: TransactionsController.GetUserTransactionsLimit
      parameters:
      - in: body
        name: body
        description: body for Transactions content
        required: true
        schema:
          $ref: '#/definitions/requests.GetUserTransactionsRequest'
      responses:
        "200":
          description: '{int} responses.TransactionsCustomResponseDTO'
        "403":
          description: body is empty
  /transactions/get-user-transactions-by-date:
    post:
      tags:
      - transactions
      description: |-
        create Transactions
        <br>
      operationId: TransactionsController.GetUserTransactions
      parameters:
      - in: body
        name: body
        description: body for Transactions content
        required: true
        schema:
          $ref: '#/definitions/requests.GetUserTransactionsByDateRequest'
      responses:
        "200":
          description: '{int} responses.TransactionsCustomResponseDTO'
        "403":
          description: body is empty
definitions:
  models.Branches:
    title: Branches
    type: object
    properties:
      Active:
        type: integer
        format: int64
      Branch:
        type: string
      BranchId:
        type: integer
        format: int64
      Country:
        type: integer
        format: int64
      CreatedBy:
        type: integer
        format: int64
      DateCreated:
        type: string
        format: datetime
      DateModified:
        type: string
        format: datetime
      Location:
        type: string
      ModifiedBy:
        type: integer
        format: int64
      PhoneNumber:
        type: string
  models.Categories:
    title: Categories
    type: object
    properties:
      CategoryId:
        type: integer
        format: int64
      CategoryName:
        type: string
      CreatedBy:
        type: integer
        format: int64
      DateCreated:
        type: string
        format: datetime
      DateModified:
        type: string
        format: datetime
      ImagePath:
        type: string
      ModifiedBy:
        type: integer
        format: int64
  models.ConfirmOrderDTO:
    title: ConfirmOrderDTO
    type: object
  models.Currencies:
    title: Currencies
    type: object
    properties:
      Active:
        type: integer
        format: int64
      CreatedBy:
        type: integer
        format: int64
      Currency:
        type: string
      CurrencyId:
        type: integer
        format: int64
      DateCreated:
        type: string
        format: datetime
      DateModified:
        type: string
        format: datetime
      ModifiedBy:
        type: integer
        format: int64
      Symbol:
        type: string
  models.Customers:
    title: Customers
    type: object
    properties:
      Active:
        type: integer
        format: int64
      CreatedBy:
        type: integer
        format: int64
      CustomerId:
        type: integer
        format: int64
      DateCreated:
        type: string
        format: datetime
      DateModified:
        type: string
        format: datetime
      Dob:
        type: string
        format: datetime
      Email:
        type: string
      FullName:
        type: string
      IdentificationNumber:
        type: string
      ImagePath:
        type: string
      LastTxnDate:
        type: string
        format: datetime
      Location:
        type: string
      ModifiedBy:
        type: integer
        format: int64
      Nickname:
        type: string
      PhoneNumber:
        type: string
      User:
        $ref: '#/definitions/models.Users'
  models.Item_prices:
    title: Item_prices
    type: object
    properties:
      Active:
        type: integer
        format: int64
      AltItemPrice:
        type: number
        format: float
      AmountPaid:
        type: number
        format: float
      CreatedBy:
        type: integer
        format: int64
      Currency:
        $ref: '#/definitions/models.Currencies'
      DateCreated:
        type: string
        format: datetime
      DateModified:
        type: string
        format: datetime
      ItemPrice:
        type: number
        format: float
      ItemPriceId:
        type: integer
        format: int64
      ModifiedBy:
        type: integer
        format: int64
      ShowAltPrice:
        type: boolean
  models.Items:
    title: Items
    type: object
    properties:
      Active:
        type: integer
        format: int64
      AvailableColors:
        type: string
      AvailableSizes:
        type: string
      Branch:
        $ref: '#/definitions/models.Branches'
      Category:
        $ref: '#/definitions/models.Categories'
      CreatedBy:
        type: integer
        format: int64
      DateCreated:
        type: string
        format: datetime
      DateModified:
        type: string
        format: datetime
      Description:
        type: string
      ImagePath:
        type: string
      ItemId:
        type: integer
        format: int64
      ItemName:
        type: string
      ItemPrice:
        $ref: '#/definitions/models.Item_prices'
      ItemStatus:
        $ref: '#/definitions/models.Status'
      LastOrderDate:
        type: string
        format: datetime
      ModifiedBy:
        type: integer
        format: int64
      Quantity:
        type: integer
        format: int64
  models.Order_items:
    title: Order_items
    type: object
    properties:
      Comment:
        type: string
      CreatedBy:
        type: integer
        format: int64
      DateCreated:
        type: string
        format: datetime
      DateModified:
        type: string
        format: datetime
      Item:
        $ref: '#/definitions/models.Items'
      ModifiedBy:
        type: integer
        format: int64
      Order:
        $ref: '#/definitions/models.Orders'
      OrderDate:
        type: string
        format: datetime
      OrderItemId:
        type: integer
        format: int64
      Quantity:
        type: integer
        format: int64
      Status:
        $ref: '#/definitions/models.Status'
  models.Orders:
    title: Orders
    type: object
    properties:
      Cost:
        type: number
        format: float
      CreatedBy:
        $ref: '#/definitions/models.Users'
      Currency:
        type: integer
        format: int64
      Customer:
        $ref: '#/definitions/models.Customers'
      DateCreated:
        type: string
        format: datetime
      DateModified:
        type: string
        format: datetime
      ModifiedBy:
        type: integer
        format: int64
      OrderDate:
        type: string
        format: datetime
      OrderDesc:
        type: string
      OrderDetails:
        type: array
        items:
          $ref: '#/definitions/models.Order_items'
      OrderEndDate:
        type: string
        format: datetime
      OrderId:
        type: integer
        format: int64
      OrderLocation:
        type: string
      OrderNumber:
        type: string
      Quantity:
        type: integer
        format: int64
      ReturnedDate:
        type: string
        format: datetime
  models.OrdersRequestDTO:
    title: OrdersRequestDTO
    type: object
  models.Payment_methods:
    title: Payment_methods
    type: object
    properties:
      Active:
        type: integer
        format: int64
      CreatedBy:
        type: integer
        format: int64
      DateCreated:
        type: string
        format: datetime
      DateModified:
        type: string
        format: datetime
      ModifiedBy:
        type: integer
        format: int64
      PaymentMethod:
        type: string
      PaymentMethodId:
        type: integer
        format: int64
  models.Payments:
    title: Payments
    type: object
    properties:
      Active:
        type: integer
        format: int64
      Amount:
        type: number
        format: double
      CreatedBy:
        type: integer
        format: int64
      DateCreated:
        type: string
        format: datetime
      DateModified:
        type: string
        format: datetime
      InitiatedBy:
        type: integer
        format: int64
      ModifiedBy:
        type: integer
        format: int64
      PaymentAccount:
        type: integer
        format: int64
      PaymentId:
        type: integer
        format: int64
      PaymentMethod:
        $ref: '#/definitions/models.Payment_methods'
      PaymentProof:
        type: string
      Reciever:
        $ref: '#/definitions/models.Users'
      Sender:
        $ref: '#/definitions/models.Customers'
      Status:
        type: integer
        format: int64
      Transaction:
        $ref: '#/definitions/models.Transactions'
  models.Services:
    title: Services
    type: object
    properties:
      Active:
        type: integer
        format: int64
      CreatedBy:
        type: integer
        format: int64
      DateCreated:
        type: string
        format: datetime
      DateModified:
        type: string
        format: datetime
      ModifiedBy:
        type: integer
        format: int64
      ServiceDescription:
        type: string
      ServiceId:
        type: integer
        format: int64
      ServiceName:
        type: string
  models.Status:
    title: Status
    type: object
    properties:
      Active:
        type: integer
        format: int64
      CreatedBy:
        type: integer
        format: int64
      DateCreated:
        type: string
        format: datetime
      DateModified:
        type: string
        format: datetime
      ModifiedBy:
        type: integer
        format: int64
      Status:
        type: string
      StatusCode:
        type: string
      StatusId:
        type: integer
        format: int64
  models.Transaction_details:
    title: Transaction_details
    type: object
    properties:
      Active:
        type: integer
        format: int64
      Amount:
        type: number
        format: float
      Comment:
        type: string
      CreatedBy:
        type: integer
        format: int64
      DateCreated:
        type: string
        format: datetime
      DateModified:
        type: string
        format: datetime
      ModifiedBy:
        type: integer
        format: int64
      RecipientAccountNumber:
        type: string
      SenderAccountNumber:
        type: string
      SenderId:
        type: integer
        format: int64
      StatusCode:
        type: string
      StatusMessage:
        type: string
      TransactionDetailId:
        type: integer
        format: int64
      TransactionId:
        $ref: '#/definitions/models.Transactions'
      TransactionType:
        type: string
  models.Transactions:
    title: Transactions
    type: object
    properties:
      Active:
        type: integer
        format: int64
      Amount:
        type: number
        format: float
      Branch:
        $ref: '#/definitions/models.Branches'
      CreatedBy:
        type: integer
        format: int64
      DateCreated:
        type: string
        format: datetime
      DateModified:
        type: string
        format: datetime
      ModifiedBy:
        type: integer
        format: int64
      Order:
        $ref: '#/definitions/models.Orders'
      Payments:
        type: array
        items:
          $ref: '#/definitions/models.Payments'
      Services:
        $ref: '#/definitions/models.Services'
      Status:
        $ref: '#/definitions/models.Status'
      TransactingCurrency:
        type: integer
        format: int64
      TransactionId:
        type: integer
        format: int64
  models.UserExtraDetails:
    title: UserExtraDetails
    type: object
    properties:
      Active:
        type: integer
        format: int64
      Branch:
        $ref: '#/definitions/models.Branches'
      CreatedBy:
        type: integer
        format: int64
      DateCreated:
        type: string
        format: datetime
      DateModified:
        type: string
        format: datetime
      ModifiedBy:
        type: integer
        format: int64
      Nickname:
        type: string
      Shop:
        type: integer
        format: int64
      User:
        type: integer
        format: int64
      UserDetailsId:
        type: integer
        format: int64
  models.Users:
    title: Users
    type: object
    properties:
      Active:
        type: integer
        format: int64
      Address:
        type: string
      CreatedBy:
        type: integer
        format: int64
      DateCreated:
        type: string
        format: datetime
      DateModified:
        type: string
        format: datetime
      Dob:
        type: string
        format: datetime
      Email:
        type: string
      FullName:
        type: string
      Gender:
        type: string
      IdNumber:
        type: string
      IdType:
        type: string
      ImagePath:
        type: string
      IsVerified:
        type: boolean
      MaritalStatus:
        type: string
      ModifiedBy:
        type: integer
        format: int64
      Password:
        type: string
      PhoneNumber:
        type: string
      UserDetails:
        $ref: '#/definitions/models.UserExtraDetails'
      UserId:
        type: integer
        format: int64
      UserType:
        type: integer
        format: int64
      Username:
        type: string
  requests.ConfirmOrderDTO:
    title: ConfirmOrderDTO
    type: object
    properties:
      Confirmedby:
        type: string
      Status:
        type: string
      TransactionId:
        type: string
  requests.GetUserOrdersRequest:
    title: GetUserOrdersRequest
    type: object
    properties:
      FromDate:
        type: string
      Id:
        type: integer
        format: int64
      ToDate:
        type: string
  requests.GetUserTransactionsByDateRequest:
    title: GetUserTransactionsByDateRequest
    type: object
    properties:
      FromDate:
        type: string
      Id:
        type: integer
        format: int64
      ToDate:
        type: string
  requests.GetUserTransactionsRequest:
    title: GetUserTransactionsRequest
    type: object
    properties:
      Id:
        type: integer
        format: int64
      Limit:
        type: integer
        format: int64
  requests.UpdateTransactionRequestDTO:
    title: UpdateTransactionRequestDTO
    type: object
    properties:
      RecipientAccountNumber:
        type: string
      SenderAccountNumber:
        type: string
  responses.OrderItemsCustom:
    title: OrderItemsCustom
    type: object
    properties:
      Comment:
        type: string
      Item:
        $ref: '#/definitions/models.Items'
      Order:
        $ref: '#/definitions/responses.OrdersCustom'
      OrderDate:
        type: string
        format: datetime
      OrderItemId:
        type: integer
        format: int64
      Quantity:
        type: integer
        format: int64
      Status:
        type: string
  responses.OrdersCustom:
    title: OrdersCustom
    type: object
    properties:
      Cost:
        type: number
        format: float
      CurrencyId:
        type: integer
        format: int64
      Customer:
        $ref: '#/definitions/models.Customers'
      DateCreated:
        type: string
        format: datetime
      DateModified:
        type: string
        format: datetime
      OrderDate:
        type: string
        format: datetime
      OrderDetails:
        type: array
        items:
          $ref: '#/definitions/models.Order_items'
      OrderEndDate:
        type: string
        format: datetime
      OrderId:
        type: integer
        format: int64
      OrderNumber:
        type: string
      Quantity:
        type: integer
        format: int64
      ReturnedDate:
        type: string
        format: datetime
  responses.StringResponseDTO:
    title: StringResponseDTO
    type: object
    properties:
      StatusCode:
        type: integer
        format: int64
      StatusDesc:
        type: string
      Value:
        type: string
tags:
- name: orders
  description: |
    OrdersController operations for Orders
- name: transactions
  description: |
    TransactionsController operations for Transactions
- name: order-items
  description: |
    Order_itemsController operations for Order_items
